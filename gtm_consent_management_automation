#!/usr/bin/env python
# coding: utf-8

# In[1]:


"""Access and manage a Google Tag Manager account."""

import argparse
import sys

import httplib2

from apiclient.discovery import build
from oauth2client import client
from oauth2client import file
from oauth2client import tools


def GetService(api_name, api_version, scope, client_secrets_path):
    # Parse command-line arguments.
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        parents=[tools.argparser])
    flags = parser.parse_args([])
    
    # Set up a Flow object to be used if we need to authenticate.
    flow = client.flow_from_clientsecrets(
        client_secrets_path, scope=scope,
        message=tools.message_if_missing(client_secrets_path))

    # Prepare credentials, and authorize HTTP object with them.
    # If the credentials don't exist or are invalid run through the native client
    # flow. The Storage object will ensure that if successful the good
    # credentials will get written back to a file.
    storage = file.Storage(api_name + '.dat')
    credentials = storage.get()
    if credentials is None or credentials.invalid:
        credentials = tools.run_flow(flow, storage, flags)
    http = credentials.authorize(http=httplib2.Http())

    # Build the service object.
    service = build(api_name, api_version, http=http)

    return service



def main(argv):
    # Get tag manager account ID from command line.
    assert len(argv) == 2 and 'usage: gtm-api-hello-world.py <account_id>'
    account_id = str(argv[1])
    account_path = 'accounts/%s' % account_id

    # Define the auth scopes to request.
    scope = ['https://www.googleapis.com/auth/tagmanager.edit.containers']

    # Authenticate and construct service.
    service = GetService('tagmanager', 'v2', scope, 'client_secrets.json')

    # Find the greetings container.
    container = FindContainer(service, account_path)


if __name__ == '__main__':
    main(sys.argv)
    


# In[63]:


def FindContainer(service, account_path):

    # Query the Tag Manager API to list all containers for the given account.
    container_wrapper = service.accounts().containers().list(parent=account_path).execute()

    # Find and return the Greetings container if it exists.
    for container in container_wrapper['container']:
        if container['name'] == 'www.test.com':
            return container
    return None

